[
  {
    "objectID": "portfolio/instore_channel.html",
    "href": "portfolio/instore_channel.html",
    "title": "BreadPay Instore Channel Expansion",
    "section": "",
    "text": "Outcome\n\nEnabled our sales team to target more enterprise customers who wanted a holistic solution encompassing e-commn and in-store\nCutting edge capabilities providing a seamless customer experience\nA transformational experience for various stakeholders and business partners showcasing the power of agility, continious learnings and incorporating them into our solutions\n\n\n\nTeam\n\n\n\n\n\n\n\n\nRole\nPrincipal Engineer\n\n\nTeam\n4\n\n\nSize\n20\n\n\n\n\n\n\n\n\nKey Considerations\n\n\n\n\n\n\n\n\n\n\n\nCross-Functional Colloboration\n\n\n\n\n\n\nHeavy colloboration across risk, fraud, marketing, sales due to developing a new experience for customers and clients\nNegotiate reveneue trade-offs early for key real life learnings\n\n\n\n\n\n\n\n\n\n\n\n\nAgility\n\n\n\n\n\n\nA more agile iterative approach was needed to ensure a frictionless experience for customer and clients\nHad to pivot and choose alternate approaches based on learnings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCutting Edge Capabilities\n\n\n\n\n\n\nColloboration with key external partners - Issuer Processor, Card Network, Wallet Providers\n\n\n\n\n\n\n\n\n\nTechnology\n\n\n\n\n\n\n\nGolang\n\n\n\n\n\nAmazon RDS (Postgres)\nKafka\nRedis\n\n\n\n\n\nKubernetes\nDocker"
  },
  {
    "objectID": "portfolio/index.html",
    "href": "portfolio/index.html",
    "title": "Shiva",
    "section": "",
    "text": "BreadPay Instore Channel Expansion\n\n\nExpand BreadPay lending product offering to customers in store throough a seamless in-store customer experience\n\n\n\nOct, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMerchant Network Partnership\n\n\nA new partnership model offering Bread Pay lending products to customers through partner’s merchant network.\n\n\n\nOct, 2021\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBread Platform\n\n\nDevelopment of next gen white-label, multi-tenant digital payments platform enabling transformation from a pure B2B2C to a SaaS based platform model\n\n\n\nDec, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit Decisioning\n\n\nRevamp credit decisioning engine and integrate a machine learning model for decisioning\n\n\n\nNov, 2019\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nYield Book\n\n\nA transformation initiative to revamp the foremost fixed income analytics platform used for complex portfolio analysis by institutional investors\n\n\n\nApr, 2016\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBusiness Rule Orchestration - Lending\n\n\nA rule management and processing platform which enabled the business to efficiently apply rules and waivers to loans\n\n\n\nApr, 2014\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "portfolio/rule_engine.html",
    "href": "portfolio/rule_engine.html",
    "title": "Business Rule Orchestration - Lending",
    "section": "",
    "text": "Outcome\nSuccessfully delivered the rule platform which eliminated delays in making rule changes as well as reduced the processing time by a factor of about 20 to 30.\n\n\nTeam\n\n\n\n\n\n\n\n\nRole\nProject Lead\n\n\nTeam\n1\n\n\nSize\n10\n\n\n\n\n\n\n\n\nKey Considerations\n\n\n\n\n\n\n\n\n\n\n\nWorking Model\n\n\n\n\n\nDisconnects around a scrum based agile working model particularly early on where not all stories were able to be completed.\n\n\n\n\n\n\n\n\n\n\n\nAlignment / Approach\n\n\n\n\n\nThere was not a clear alignment around the approach with a focus on configurability and correctness over performance.\n\n\n\n\n\n\n\n\nTechnology\nA modern single page application (SPA) connecting to highly scalable services through an REST API.\n\n\n\n\n\n\n\nJavascript\nBackbone\n\n\n\n\n\nJava\nSpring\nTibco EMS\n\n\n\n\n\nOracle\nHibernate"
  },
  {
    "objectID": "portfolio/merchant_network_partnership.html",
    "href": "portfolio/merchant_network_partnership.html",
    "title": "Merchant Network Partnership",
    "section": "",
    "text": "Outcome\n\nA new business model leveraging partner’s merchant network, opening up new opportunities with additional partnerships down the line\nA pure API based platform integration with the partner integrating BreadPay into their existing acquisition experience\n\n\n\nTeam\n\n\n\n\n\n\n\n\nRole\nPrincipal Engineer\n\n\nTeam\n3\n\n\nSize\n35\n\n\n\n\n\n\n\n\nKey Consideration\n\n\n\n\n\n\n\n\n\n\n\nCross-Functional Colloboration\n\n\n\n\n\n\nChanges across various domain to enable new partnership model and configurability\nPartner with sales and integrations to develop new automated onboarding process for partners\n\n\n\n\n\n\n\n\n\n\n\n\nSecurity Models\n\n\n\n\n\n\nNew security models to support a pure API integration model\n\n\n\n\n\n\n\n\n\nTechnology\n\n\n\n\n\n\n\nGolang\nPython\n\n\n\n\n\nAmazon RDS (Postgres)\nKafka\nRedis\n\n\n\n\n\nKubernetes\nDocker\nOkta"
  },
  {
    "objectID": "blog/functional_programming_csharp_maybe_monad.html",
    "href": "blog/functional_programming_csharp_maybe_monad.html",
    "title": "Functional Programming in C# - Maybe Monad",
    "section": "",
    "text": "Overview\nMonads are getting a lot of attention with the proliferation of functional languages as well as in general purpose languages like C# ( LINQ is a good example). There are very good articles and videos which describes them in detail.\nA monad, in very simple terms, is an amplified type and provides a way to compose functions together. The Maybe monad is a very simple amplified type which defines the simple concept of whether a value exists or not. C# does have the Nullable type but it is limited to value types. For reference types, it is defined as to whether the object is null. Maybe monad serves to unify it across both value and reference types as well as provide us a way to express our intent in a more declarative fashion.\n\n\nUse Case\nLet us take a very simple example to illustrate this concept. Our aim is to get a item from a local cache or from the server depending on whether the item exists in the cache and display it to the user. Also if the item is being retrieved from the server, we would like to notify the consumer about it. If both operation we could like the raise an error. Let us assume that the service supports a method to retrieve the item(Retrieve). We will also assume that the consumer has the following three methods - Show (for displaying the item), Notify and Error.\nIn general, this will be written as follows:\nItem item = cache.Get();\nif (item == null)\n{\n    consumer.Notify();\n    item = service.Retrieve();                \n}\nif (item != null)\n{\n    consumer.Show(item);\n}\nelse\n{\n    consumer.Error();\n}\n\n\nMonad Implementation\nMonads are generally made up of two functions, Unit and Bind. The Maybe monad class itself is very simple.\npublic class Maybe&lt;T&gt;\n{\n    public readonly static Maybe&lt;T&gt; Empty = new Maybe&lt;T&gt;();\n \n    public T Value { get; private set; }\n \n    public bool HasValue { get; private set; }\n \n    private Maybe()\n    {\n        HasValue = false;\n    }\n \n    public Maybe(T value)\n    {\n        Value = value;\n        HasValue = true;\n    }\n}\nThe Unit function lets us convert any value to the corresponding monad. It is generally easier if these functions are implemented as extension methods. In the case of Maybe monad, it is implemented as follows:\npublic static Maybe&lt;T&gt; ToMaybe&lt;T&gt;(this Nullable&lt;T&gt; obj) where T : struct\n{\n    if (obj.HasValue)\n    {\n        return new Maybe&lt;T&gt;(obj.Value);\n    }\n    return Maybe&lt;T&gt;.Empty;\n}\n \npublic static Maybe&lt;T&gt; ToMaybe&lt;T&gt;(this T value)\n{\n    if (!(value is ValueType))\n    {\n        if (object.ReferenceEquals(value, null))\n        {\n            return Maybe&lt;T&gt;.Empty;\n        }\n    }\n \n    return new Maybe&lt;T&gt;(value);\n}\nThere are two implementations here, because we need to able to convert any values ( structs, nullable structs and reference types) easily.\nThe Bind function is the glue that provides us with the ability to achieve function composition. The implementation is as follows:\npublic static Maybe&lt;V&gt; SelectMany&lt;T, U, V&gt;(this Maybe&lt;T&gt; m, Func&lt;T, Maybe&lt;U&gt;&gt; k, Func&lt;T, U, V&gt; s)\n{\n    if (!m.HasValue)\n    {\n        return Maybe&lt;V&gt;.Empty;\n    }\n \n    Maybe&lt;U&gt; u = k(m.Value);\n    return !u.HasValue ? Maybe&lt;V&gt;.Empty : s(m.Value, u.Value).ToMaybe();\n}\n \npublic static Maybe&lt;U&gt; Select&lt;U, T&gt;(this Maybe&lt;T&gt; m, Func&lt;T, U&gt; k)\n{\n    return !m.HasValue ? Maybe&lt;U&gt;.Empty : k(m.Value).ToMaybe();\n}\n\npublic static Maybe&lt;U&gt; Or&lt;T, U&gt;(this Maybe&lt;T&gt; m, Func&lt;T, U&gt; k)\n{\n    return m.HasValue ? Maybe&lt;U&gt;.Empty : k(m.Value).ToMaybe();\n}\nThe functions listed above forms the basis of any monadic implementation. The usage of SelectMany lets us use it in Linq expressions easily.\n\nSide Effects\nIn addition to this, to achieve a more declarative syntax, two more extension methods are used. These lets us perform actions depending on whether there were any values.\npublic static Maybe&lt;T&gt; Do&lt;T&gt;(this Maybe&lt;T&gt; m, Action&lt;T&gt; action)\n{\n    if (m.HasValue)\n    {\n        action(m.Value);\n    }\n \n    return m;\n}\n \npublic static Maybe&lt;T&gt; DoOnEmpty&lt;T&gt;(this Maybe&lt;T&gt; m, Action action)\n{\n    if (!m.HasValue)\n    {\n        action();\n    }\n \n    return m;\n} \n\n\n\nConclusion\nThe Do extension methods lets us perform side effect actions depending on whether a value exists or not. These two methods in conjunction with the unit and bind functions defined above lets us express our intention in a declaration fashion by using function composition.\nNow applying all these function, let us rewrite our original example. A step by step explanation follows the example.\ncache\n    .Get().ToMaybe()\n    .DoOnEmpty(consumer.Notify)\n    .Or(service.Retrieve)\n    .Do(consumer.Show)\n    .DoOnEmpty(consumer.Error);\nFirst, we are converting the result from Get() to Maybe monad using the Bind function (Line 2).\nThe remaining three lines deal with the case where there is no value. We first notify the user using DoIfEmpty (Line 3)\nWe then retrieve the item from the server using the retrieve method. We do this by using Or which creates a new monad by capturing the result from the retrieve method. This lets us perform further actions based on the result from the Retrieve method (Line 4).\nThe remaining two lines ( Lines 5 and 6) shows the result to the consumer or raises an error.\nThough the example is a relatively simple one, it does show how function composition can result in expressing our intent in a more declarative fashion as well as abstract away recurring responsibilities, for instance, null checks."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sivabalan (Shiva) Muthukumar",
    "section": "",
    "text": "Highly accomplished technical leader, engineer and architect with a proven track record of driving exceptional results and successfully delivering complex and scalable solutions across different technologies and domains.\n\n\n\n Thought leader skilled in mentoring and coaching, responsible for guiding teams and organizations in modern practices and concepts.\n\n\n Passionate engineer keen on learning new technologies and applying them to provide innovative solutions to real-world problems.\n\n\n Hands-on engineer and architect well versed in applying best practices across foundational pillars - security, scalability, reliability, performance and operational readiness with a long history in cloud native development and transformation."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Shiva",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\nCategories\n\n\n\n\n\n\n\n\n\nFeb 21, 2011\n\n\nFunctional Programming in C# - Maybe Monad\n\n\nQuick overview of implementing and using Maybe monad in C#\n\n\nFunctional Programming, C#\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Highly accomplished technical leader, engineer and architect with a proven track record of driving exceptional results and successfully delivering complex and scalable solutions across different technologies and domains.  Thought leader skilled in mentoring and coaching, responsible for guiding teams and organizations in modern practices and concepts.Passionate engineer keen on learning new technologies and applying them to provide innovative solutions to real-world problems.   Hands-on engineer and architect well versed in applying best practices across foundational pillars - security, scalability, reliability, performance and operational readiness with a long history in cloud native development and transformation."
  },
  {
    "objectID": "about.html#experience",
    "href": "about.html#experience",
    "title": "About",
    "section": "Experience",
    "text": "Experience\n\nBread Financial Holdings\n\n\n\n\n\n\n\n\nPrincipal Engineer / Principal Enterprise Architect\n\n\nNew York\n\n\nApr 2020 - Present\n\n\nHands-on technology leader and architect for the BreadPay platform primarily focused on loans and lending products. Define platform strategy and establish roadmap. Advisory role supporting the cards business in various modernization initiatives. Mentoring and coaching engineers, providing feedback and guidance on their projects.\n\n\nDirector of Engineering\n\n\nNew York\n\n\nMar 2019 - Apr 2020\n\n\nEngineering leader for Bread’s buy now pay later service and infrastructure teams. Scaling teams, coaching and establish hiring practices.\n\n\n\n\n\nDigital Asset\n\n\n\n\n\n\n\n\nEngineering Team Lead\n\n\nNew York\n\n\nAug 2016 - Mar 2019\n\n\nTeam Leader for the design and development of the solution framework on the daml based distributed ledger platform. Global lead for developing the settlement system using smart contracts and distributed ledger to replace the legacy system for a leading exchange.\n\n\n\n\n\nLab49\n\n\n\n\n\n\n\n\nAssociate Director\n\n\nNew York\n\n\nDec 2015 - Aug 2016\n\n\nPractice head supporting lab’s compute practice through coaching and mentoring. Support pre-sales process through analysis and client engagements. Perform architecture reviews and recommendations across various engagements.\n\n\nPrincipal Software Engineer\n\n\nNew York\n\n\nMay 2013 - Dec 2015\n\n\nLead large scale transformational engagements - Citi (Yield Book - Fixed Income Analytics Platform) and FannieMae (Lending Platform). Career development and mentorship for lab’s compute practice.\n\n\nSoftware Engineer - Senior Software Engineer\n\n\nNew York\n\n\nNov 2009 - May 2013\n\n\nReal Time desktop trading applications, Web based single dealer platforms and portfolio management systems across various investment banks and hedge funds.\n\n\n\n\n\nBarclays\n\n\n\n\n\n\n\n\nSenior Software Engineer/Assistant Vice President\n\n\nNew York\n\n\nAug 2009 - Nov 2009\n\n\nLead engineer on the risk platform with a focus on performance and stability improvements.\n\n\n\n\n\nMorgan Stanley\n\n\n\n\n\n\n\n\nSenior Software Engineer/Associate\n\n\nNew York\n\n\nAug 2007 - Aug 2009\n\n\nLead engineer on the equities and derivatives trading platforms.\n\n\n\n\n\nGlaxo Smith Kline\n\n\n\n\n\n\n\n\nSenior Software Developer\n\n\nKing of Prussia, Pennsylvania\n\n\nMar 2006 - Aug 2007\n\n\nLead engineer in the design and development of study management platform to support clinical studies.\n\n\n\n\n\nTexas Tech Health Science Center\n\n\n\n\n\n\n\n\nSenior Programmer/Analyst\n\n\nLubbock, Texas\n\n\nDec 2004 - Mar 2006\n\n\nDesign and development of web based portal for report discovery and management."
  },
  {
    "objectID": "about.html#skills",
    "href": "about.html#skills",
    "title": "About",
    "section": "Skills",
    "text": "Skills\n\n\nProgramming Languages\n\n\nGolang, Java, Scala, C#, Javascript, Python, SQL\n\n\nArchitecture\n\n\nCloud Native, Microservices, Event-Driven Systems, API(REST, RPC), Observability, Distributed Systems, Distributed Ledger, Domain-Driven Design, Testing Methodologies\n\n\nTools/Technologies\n\n\nPostgreSQL, Messaging(Kafka, RabbitMQ), ksqlDB, Caching(Redis), AWS, GCP, MongoDB, DataDog, Kubernetes, Docker\n\n\nPeople/Process\n\n\nAgile, Kanban, Architecture Governance(Principles, Standards), RFCs, ADRs, C4\n\n\nIndustry Knowledge\n\n\nFinTech (BNPL, Loans), Payment Systems, Equities, Fixed Income"
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "About",
    "section": "Education",
    "text": "Education\n\n\nTexas Tech University  Master of Science, Computer Science\n\n\nLubbock, TX  Aug 2002 - May 2005\n\n\nMadras University  Bachelor of Engineering, Computer Science\n\n\nChennai, India  Aug 1998 - May 2002"
  },
  {
    "objectID": "portfolio/platform.html",
    "href": "portfolio/platform.html",
    "title": "Bread Platform",
    "section": "",
    "text": "Outcome\n\nMajor milestone in enabling business model transformation\nBread’s first international expansion enabling RBC to offer new payment solution to their mechants and customers\nEventually enabled us to migrate existing clients from the legacy to new platform based on capabilities\n\n\n\nTeam\n\n\n\n\n\n\n\n\nRole\nPrincipal Engineer\n\n\nTeam\n6\n\n\nSize\n70\n\n\n\n\n\n\n\n\nKey Considerations\n\n\n\n\n\n\n\n\n\n\n\nCross-Team Colloboration\n\n\n\n\n\n\nHeavy colloboration was needed to ensure alignment across the teams\nFirst Principles, standards, guidelines and common frameworks helped\n\n\n\n\n\n\n\n\n\n\n\n\nTimelines / Pandemic / Client Interactions\n\n\n\n\n\n\nPandameic made it harder for in-person colloborations with the team as well as the client\nVery focussed effort to build only necessary capabilities to handle aggresive milestones\n\n\n\n\n\n\n\n\n\nTechnology\n\n\n\n\n\n\n\nGolang\nPython\n\n\n\n\n\nAmazon RDS (Postgres)\nRedis\nMongoDB\n\n\n\n\n\nKubernetes/EKS\nDocker\nAirflow\nIstio\n\n\n\n\n\n\n\nREST\ngRPC\nKafka\n\n\n\n\n\nDatadog\nOpenTracing\nOAuth2\nOkta"
  },
  {
    "objectID": "portfolio/yield_book.html",
    "href": "portfolio/yield_book.html",
    "title": "Yield Book",
    "section": "",
    "text": "Outcome\nDelivered a more modern, compelling and effective platform, enabling them to keep their pole position as well as resulting in a successful acquisition by London Stock Exchange .\n\n\nTeam\n\n\n\n\n\n\n\n\nRole\nProject Lead\n\n\nTeam\n1 - 4\n\n\nSize\n8 - 35\n\n\n\n\n\n\nBrought on a few months into the project to help turn around and eventually enable scaling out the teams.\n\n\nKey Considerations\n\n\n\n\n\n\n\n\n\n\n\nDelivery\n\n\n\n\n\nTeam was running behind significantly resulting in long hours and lower morale.\n\nIdentified key roadblocks and worked on eliminating them.\nOpened communication channels with key stakeholders to agree to new commitments and change in approach without sacrificing quality.\n\n\n\n\n\n\n\n\n\n\n\n\nIntegration\n\n\n\n\n\nIntegration challenges with the underlying analytics system.\n\nWorked with analytics team to move towards an contract based approach with clear specifications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTeam Scale Out\n\n\n\n\n\nDesire to scale out aggresively with launch of several new capabilities.\n\nBrought on additional members resulting in tripling the team\nImplemented modularized development and packaging to support parallel teams\n\n\n\n\n\n\n\n\n\nTechnology\nA modern single page application (SPA) connecting to highly scalable services through an REST API.\n\n\n\n\n\n\n\nJavascript\nAngular\nD3\nSass\n\n\n\n\n\nNodeJS\nJava\nREST\n\n\n\n\n\nBDD\nCucumber\nRSpec"
  },
  {
    "objectID": "portfolio/credit_decisioning.html",
    "href": "portfolio/credit_decisioning.html",
    "title": "Credit Decisioning",
    "section": "",
    "text": "Outcome\n\nAbility for risk to adjust risk rules without code changes\nProductionize first ML model to support credit decisioning\n\n\n\nTeam\n\n\n\n\n\n\n\n\nRole\nDirector of Engineering\n\n\nTeam\n3\n\n\nSize\n14\n\n\n\n\n\n\n\n\nChallenges\n\n\n\n\n\n\n\n\n\n\n\nRisk Platform\n\n\n\n\n\n\nShadow Deployment of new risk platform\nAnalysis\n\n\n\n\n\n\n\n\n\n\n\n\nML Incorporation\n\n\n\n\n\n\nDeployment & Runtime Pipeline\nConsiderations like bias, reasons, etc\n\n\n\n\n\n\n\n\n\nTechnology\n\n\n\n\n\n\n\nGolang\nPython\nML\n\n\n\n\n\nPostgres\n\n\n\n\n\nAWS\nECS"
  }
]